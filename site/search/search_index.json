{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MiraiWorks Documentation","text":"<p>Welcome to the MiraiWorks platform documentation. This comprehensive guide covers all aspects of the application from setup to deployment.</p>"},{"location":"#overview","title":"Overview","text":"<p>MiraiWorks is a modern HR and recruitment management platform built with:</p> <ul> <li>Backend: FastAPI with Python</li> <li>Frontend: React with TypeScript</li> <li>Database: PostgreSQL</li> <li>Authentication: JWT with 2FA support</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Getting Started - Set up your development environment</li> <li>Development Workflow - Learn our development process</li> <li>API Reference - Explore the backend API endpoints</li> </ol>"},{"location":"#architecture","title":"Architecture","text":"<p>The application follows a clean architecture pattern with clear separation of concerns:</p> <ul> <li>Models: Database schema definitions</li> <li>Schemas: API validation and serialization</li> <li>CRUD: Database operations</li> <li>Endpoints: HTTP routing logic</li> <li>Services: Business logic and orchestration</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>User management with role-based permissions</li> <li>Company and job management</li> <li>Resume processing and management</li> <li>Interview scheduling and management</li> <li>Calendar integration</li> <li>Real-time notifications</li> <li>Comprehensive testing suite</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Please refer to our development guidelines and code review process before contributing.</p>"},{"location":"ARCHITECTURE_RECOMMENDATIONS/","title":"Architecture Recommendations","text":""},{"location":"ARCHITECTURE_RECOMMENDATIONS/#1-schema-optimization","title":"1. Schema Optimization","text":"<p>Current resume schemas are well-structured but could be optimized:</p> <ul> <li>Consider breaking down large schema files (resume.py) into smaller modules</li> <li>Move validation logic into separate validator classes</li> <li>Add caching layer for frequently accessed resume data</li> <li>Implement request/response compression for large resume payloads</li> </ul>"},{"location":"ARCHITECTURE_RECOMMENDATIONS/#2-frontend-architecture","title":"2. Frontend Architecture","text":"<p>Strengths: - Clean component separation - Type safety with TypeScript - Modern Next.js 15 setup</p> <p>Areas for improvement: - Add state management solution (Redux/Zustand) - Implement component testing - Add error boundary handling - Setup performance monitoring - Add Progressive Web App capabilities</p>"},{"location":"ARCHITECTURE_RECOMMENDATIONS/#3-api-architecture","title":"3. API Architecture","text":"<p>Recommendations: - Implement API versioning - Add rate limiting - Setup response caching - Add request validation middleware - Implement comprehensive error handling - Add API documentation using OpenAPI/Swagger</p>"},{"location":"CODE_REVIEW_GUIDELINES/","title":"MiraiWorks Code Review Guidelines","text":""},{"location":"CODE_REVIEW_GUIDELINES/#pull-request-requirements","title":"\ud83d\udccb Pull Request Requirements","text":""},{"location":"CODE_REVIEW_GUIDELINES/#1-documentation","title":"1. Documentation","text":"<ul> <li>[ ] Code is well-commented using JSDoc/docstring standards</li> <li>[ ] API changes are documented in OpenAPI/Swagger</li> <li>[ ] README updates if needed</li> <li>[ ] Changelog entry added</li> <li>[ ] Type definitions are complete and accurate</li> </ul>"},{"location":"CODE_REVIEW_GUIDELINES/#2-testing","title":"2. Testing","text":"<ul> <li>[ ] Unit tests cover new functionality</li> <li>[ ] Integration tests for API changes</li> <li>[ ] Test coverage meets minimum requirements (90%)</li> <li>[ ] Edge cases are tested</li> <li>[ ] Error scenarios are covered</li> </ul>"},{"location":"CODE_REVIEW_GUIDELINES/#3-code-quality","title":"3. Code Quality","text":"<ul> <li>[ ] Follows project architecture (CLAUDE.md)</li> <li>[ ] No code smells or anti-patterns</li> <li>[ ] Consistent naming conventions</li> <li>[ ] No unnecessary complexity</li> <li>[ ] Efficient database queries</li> <li>[ ] No hardcoded values</li> </ul>"},{"location":"CODE_REVIEW_GUIDELINES/#4-security","title":"4. Security","text":"<ul> <li>[ ] Input validation is thorough</li> <li>[ ] Authentication/authorization checked</li> <li>[ ] No sensitive data exposure</li> <li>[ ] SQL injection prevention</li> <li>[ ] XSS prevention</li> <li>[ ] CSRF protection where needed</li> </ul>"},{"location":"CODE_REVIEW_GUIDELINES/#5-performance","title":"5. Performance","text":"<ul> <li>[ ] No N+1 queries</li> <li>[ ] Appropriate indexing for queries</li> <li>[ ] Efficient data structures used</li> <li>[ ] Resource-intensive operations optimized</li> <li>[ ] Caching strategy where appropriate</li> </ul>"},{"location":"CODE_REVIEW_GUIDELINES/#review-process","title":"\ud83d\udd0d Review Process","text":""},{"location":"CODE_REVIEW_GUIDELINES/#before-review","title":"Before Review","text":"<ol> <li>Run all tests locally</li> <li>Check code formatting</li> <li>Verify CI/CD pipeline passes</li> <li>Self-review using checklist</li> </ol>"},{"location":"CODE_REVIEW_GUIDELINES/#during-review","title":"During Review","text":"<ol> <li>Read the description and requirements</li> <li>Check out the branch locally</li> <li>Test the changes manually</li> <li>Review code using checklist</li> <li>Provide constructive feedback</li> </ol>"},{"location":"CODE_REVIEW_GUIDELINES/#review-comments","title":"Review Comments","text":"<ul> <li>Be specific and clear</li> <li>Explain why, not just what</li> <li>Suggest improvements</li> <li>Link to documentation/resources</li> <li>Use a collaborative tone</li> </ul>"},{"location":"CODE_REVIEW_GUIDELINES/#response-to-reviews","title":"Response to Reviews","text":"<ul> <li>Address all comments</li> <li>Explain complex changes</li> <li>Update code based on feedback</li> <li>Request re-review when ready</li> </ul>"},{"location":"CODE_REVIEW_GUIDELINES/#common-issues-to-watch-for","title":"\ud83d\udeab Common Issues to Watch For","text":""},{"location":"CODE_REVIEW_GUIDELINES/#backend","title":"Backend","text":"<ol> <li>Architecture Violations</li> <li>Business logic in endpoints</li> <li>Database queries in services</li> <li> <p>Missing input validation</p> </li> <li> <p>Database Issues</p> </li> <li>Missing indexes</li> <li>Inefficient queries</li> <li>Transaction handling</li> <li> <p>Connection management</p> </li> <li> <p>Security Issues</p> </li> <li>Missing authentication</li> <li>Improper authorization</li> <li>Unvalidated input</li> <li>Unsafe data handling</li> </ol>"},{"location":"CODE_REVIEW_GUIDELINES/#frontend","title":"Frontend","text":"<ol> <li>React/Next.js Best Practices</li> <li>Unnecessary re-renders</li> <li>Memory leaks</li> <li>Proper hook usage</li> <li> <p>Component composition</p> </li> <li> <p>TypeScript</p> </li> <li>Type safety</li> <li>Interface definitions</li> <li>Generic usage</li> <li> <p>Type assertions</p> </li> <li> <p>Performance</p> </li> <li>Bundle size</li> <li>Code splitting</li> <li>Image optimization</li> <li>State management</li> </ol>"},{"location":"CODE_REVIEW_GUIDELINES/#review-checklist-template","title":"\u2705 Review Checklist Template","text":"<pre><code>### General\n- [ ] Code follows project architecture\n- [ ] Documentation is complete\n- [ ] Tests are comprehensive\n- [ ] Performance is optimized\n- [ ] Security is addressed\n\n### Specific Areas\n- [ ] Input validation\n- [ ] Error handling\n- [ ] Logging\n- [ ] Configuration\n- [ ] Dependencies\n\n### Code Quality\n- [ ] DRY principles\n- [ ] SOLID principles\n- [ ] Clean Code practices\n- [ ] Consistent styling\n- [ ] Clear naming\n\n### Security\n- [ ] Authentication\n- [ ] Authorization\n- [ ] Data validation\n- [ ] Error messages\n- [ ] Sensitive data\n\n### Testing\n- [ ] Unit tests\n- [ ] Integration tests\n- [ ] Edge cases\n- [ ] Error scenarios\n- [ ] Coverage\n</code></pre>"},{"location":"CODE_REVIEW_GUIDELINES/#review-completion-criteria","title":"\ud83c\udfaf Review Completion Criteria","text":"<ol> <li>All checklist items addressed</li> <li>CI/CD pipeline passes</li> <li>Test coverage meets requirements</li> <li>Documentation is complete</li> <li>Security review passed</li> <li>Performance criteria met</li> </ol>"},{"location":"CODE_REVIEW_GUIDELINES/#continuous-improvement","title":"\ud83d\udcc8 Continuous Improvement","text":"<ul> <li>Review guidelines quarterly</li> <li>Update based on team feedback</li> <li>Track common issues</li> <li>Share learnings in team meetings</li> <li>Update documentation regularly</li> </ul>"},{"location":"PERFORMANCE_RECOMMENDATIONS/","title":"Performance Recommendations","text":"<ol> <li>Database Optimization</li> <li>Add indexes for frequently queried fields</li> <li>Implement query caching</li> <li>Setup database connection pooling</li> <li> <p>Add database monitoring</p> </li> <li> <p>API Performance</p> </li> <li>Implement response compression</li> <li>Add API caching layer</li> <li>Setup CDN for static assets</li> <li> <p>Optimize large response payloads</p> </li> <li> <p>Frontend Performance</p> </li> <li>Implement code splitting</li> <li>Add lazy loading for components</li> <li>Setup performance monitoring</li> <li>Optimize image loading</li> </ol>"},{"location":"RECOMMENDATIONS/","title":"MiraiWorks Project Recommendations","text":""},{"location":"RECOMMENDATIONS/#1-testing-priority-issues","title":"1. Testing Priority Issues","text":"<p>Current test coverage is critically low (~28%). Immediate actions needed:</p> <ol> <li>Fix pytest async fixture configuration issues that are blocking test execution</li> <li>Prioritize testing of high-risk endpoints:</li> <li>resumes.py (23 routes) - Critical priority</li> <li>meetings.py (13 routes) - High complexity</li> <li>interviews.py (11 routes) - High complexity</li> </ol> <p>Action items: - Resolve async fixture setup in conftest.py - Implement missing test coverage for resumes API - Follow test structure defined in CLAUDE.md - Setup CI/CD pipeline with coverage reporting</p>"},{"location":"SECURITY_RECOMMENDATIONS/","title":"Security Recommendations","text":"<ol> <li>Authentication &amp; Authorization</li> <li>Implement refresh token rotation</li> <li>Add rate limiting for auth endpoints</li> <li>Add 2FA support for all user types</li> <li> <p>Implement session management</p> </li> <li> <p>Data Protection</p> </li> <li>Add encryption for sensitive resume data</li> <li>Implement secure file upload validation</li> <li>Add PDF watermarking for downloaded resumes</li> <li> <p>Setup audit logging</p> </li> <li> <p>API Security</p> </li> <li>Add CORS configuration</li> <li>Implement request sanitization</li> <li>Add security headers</li> <li>Setup WAF rules</li> </ol>"},{"location":"WORKFLOW_RECOMMENDATIONS/","title":"Development Workflow Recommendations","text":"<ol> <li>CI/CD Improvements</li> <li>Setup automated testing in CI pipeline</li> <li>Add code quality checks</li> <li>Implement automated deployments</li> <li> <p>Add performance regression testing</p> </li> <li> <p>Code Quality</p> </li> <li>Setup ESLint/Prettier configuration:<ul> <li>ESLint for code quality and best practices</li> <li>Prettier for consistent formatting</li> <li>TypeScript-specific rules</li> <li>React/Next.js best practices</li> <li>Import sorting and organization</li> </ul> </li> <li>Add commit hooks for code formatting:<ul> <li>Husky for Git hooks management</li> <li>lint-staged for staged files</li> <li>Prettier for code formatting</li> <li>ESLint for code linting</li> <li>Black for Python formatting</li> </ul> </li> <li>Implement code review guidelines (see CODE_REVIEW_GUIDELINES.md):<ul> <li>Mandatory review checklist</li> <li>Security review requirements</li> <li>Performance review criteria</li> <li>Documentation requirements</li> </ul> </li> <li> <p>Setup automated documentation generation:</p> <ul> <li>FastAPI Swagger/OpenAPI for API docs</li> <li>TypeDoc for frontend documentation</li> <li>Sphinx for Python backend documentation</li> <li>MkDocs for project documentation</li> <li>Automated deployment to GitHub Pages</li> </ul> </li> <li> <p>Monitoring &amp; Logging</p> </li> <li>Add centralized logging</li> <li>Setup error tracking</li> <li>Implement performance monitoring</li> <li>Add user analytics</li> </ol>"}]}