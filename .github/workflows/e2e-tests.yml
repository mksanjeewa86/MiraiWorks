name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: miraiworks
          MYSQL_USER: hrms
          MYSQL_PASSWORD: hrms
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend-nextjs/package-lock.json

    # Backend Setup (Python FastAPI)
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup database and create sample data
      run: |
        cd backend
        # Wait for MySQL to be ready
        sleep 30
        # Create sample data
        python create_sample_data.py || echo "Sample data creation failed"
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: hrms
        DB_PASSWORD: hrms
        DB_NAME: miraiworks

    - name: Start backend server
      run: |
        cd backend
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 15
        # Test if server is running
        curl -f http://localhost:8000/health || echo "Backend health check failed"
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: hrms
        DB_PASSWORD: hrms
        DB_NAME: miraiworks
        JWT_SECRET: test-secret-key-for-ci-very-long-and-secure

    # Frontend Setup
    - name: Install frontend dependencies
      run: |
        cd frontend-nextjs
        npm ci

    - name: Install Playwright Browsers
      run: |
        cd frontend-nextjs
        npx playwright install --with-deps

    - name: Build frontend
      run: |
        cd frontend-nextjs
        npm run build

    # Run Tests (Playwright will start its own server via webServer config)
    - name: Run Playwright tests
      run: |
        cd frontend-nextjs
        npx playwright test
      env:
        CI: true
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: http://localhost:8000/api

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results
        path: frontend-nextjs/tests/results/
        retention-days: 7

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend-nextjs/tests/reports/
        retention-days: 7