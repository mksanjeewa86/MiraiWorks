name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Basic documentation check
        run: |
          echo "Checking documentation files exist..."
          ls -la docs/ || echo "docs directory not found"
          ls -la *.md || echo "No root markdown files"
          echo "‚úÖ Basic documentation check complete"

      - name: Check basic file structure
        run: |
          echo "Checking basic project structure..."
          ls -la frontend/ backend/ || echo "Some directories missing"
          echo "‚úÖ Basic structure check complete"

  docs:
    runs-on: ubuntu-latest
    needs: docs-validation
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Python dependencies
        run: |
          pip install sphinx sphinx-rtd-theme mkdocs mkdocs-material mkdocs-minify-plugin
          # Install backend dependencies for OpenAPI generation
          pip install -r backend/requirements.txt || echo "Some backend dependencies failed, continuing..."

      - name: Install Node.js dependencies
        env:
          CI: true
          HUSKY: 0
        run: |
          cd frontend
          npm install
          npm install -g typedoc

      - name: Generate API docs
        run: |
          cd backend
          python -c "
          import json
          from fastapi.openapi.utils import get_openapi
          from app.main import app
          with open('openapi.json', 'w') as f:
              json.dump(get_openapi(
                  title=app.title,
                  version=app.version,
                  openapi_version=app.openapi_version,
                  description=app.description,
                  routes=app.routes,
              ), f)
          "

      - name: Generate Frontend docs
        run: |
          cd frontend
          typedoc --out docs/frontend --entryPointStrategy expand src/ || echo "Frontend docs generation failed, continuing..."

      - name: Generate Backend docs
        run: |
          cd backend
          sphinx-build -b html docs/source/ docs/build/ || echo "Backend docs generation failed, continuing..."

      - name: Generate Project docs
        run: |
          mkdocs build || echo "Project docs generation failed, continuing..."

      - name: Create integrated documentation site
        run: |
          # Create integrated documentation structure
          mkdir -p site/api site/frontend-docs site/backend-docs

          # Copy API documentation
          if [ -f backend/openapi.json ]; then
            cp backend/openapi.json site/api/
            echo "‚úÖ OpenAPI spec copied to site/api/"
          fi

          # Copy frontend docs
          if [ -d frontend/docs ]; then
            cp -r frontend/docs/* site/frontend-docs/ 2>/dev/null || echo "No frontend docs to copy"
          fi

          # Copy backend docs
          if [ -d backend/docs/build ]; then
            cp -r backend/docs/build/* site/backend-docs/ 2>/dev/null || echo "No backend docs to copy"
          fi

          # Create navigation index
          cat > site/documentation-index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>MiraiWorks Documentation</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 800px; margin: 40px auto; padding: 20px; }
                  .nav-card { border: 1px solid #e1e5e9; border-radius: 8px; padding: 20px; margin: 15px 0; }
                  .nav-card h3 { margin-top: 0; color: #6C63FF; }
                  a { color: #6C63FF; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>üöÄ MiraiWorks Documentation Hub</h1>
              <div class="nav-card">
                  <h3>üìö Project Documentation</h3>
                  <p>Complete project guides, architecture, and development workflow</p>
                  <a href="index.html">‚Üí Browse Project Docs</a>
              </div>
              <div class="nav-card">
                  <h3>üîå API Documentation</h3>
                  <p>Interactive API documentation and OpenAPI specification</p>
                  <a href="api/openapi.json">‚Üí OpenAPI Specification</a><br>
                  <small>Import into Swagger Editor, Postman, or Insomnia</small>
              </div>
              <div class="nav-card">
                  <h3>‚ö° Frontend Documentation</h3>
                  <p>Component documentation and TypeScript definitions</p>
                  <a href="frontend-docs/index.html">‚Üí Frontend Docs</a>
              </div>
              <div class="nav-card">
                  <h3>üèóÔ∏è Backend Documentation</h3>
                  <p>Code documentation and API implementation details</p>
                  <a href="backend-docs/index.html">‚Üí Backend Docs</a>
              </div>
              <hr>
              <p><small>Generated automatically by CI/CD</small></p>
          </body>
          </html>
          EOF

          echo "‚úÖ Integrated documentation site created"

      - name: Upload documentation artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: complete-documentation-site
          path: ./site
          retention-days: 90

      - name: Try GitHub Pages deployment (if available)
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true
        continue-on-error: true

      - name: Documentation ready
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üìö Documentation built successfully!"
          echo ""
          echo "üìã PRIVATE REPOSITORY NOTES:"
          echo "‚Ä¢ GitHub Pages for private repos requires GitHub Pro/Team/Enterprise"
          echo "‚Ä¢ If you have a free account, Pages won't be available"
          echo ""
          echo "üì• ACCESS OPTIONS:"
          echo "1. Download 'documentation-site' artifact from this workflow run"
          echo "2. Extract and open 'index.html' in your browser for local viewing"
          echo "3. Upload to your own hosting service (Netlify, Vercel, etc.)"
          echo ""
          echo "üîó If you have GitHub Pro+:"
          echo "1. Go to: https://github.com/mksanjeewa86/MiraiWorks/settings/pages"
          echo "2. Under 'Source', select 'Deploy from a branch'"
          echo "3. Choose 'gh-pages' branch and '/ (root)' folder"
          echo ""
          echo "‚úÖ Documentation is fully built and ready to use!"
