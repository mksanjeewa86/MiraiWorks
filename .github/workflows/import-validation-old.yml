name: Import Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  import-validation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install ruff
        # Install project dependencies for import validation
        pip install -r requirements.txt

    - name: Check for unused imports
      continue-on-error: true
      id: unused-imports
      run: |
        cd backend
        echo "Checking for unused imports..."
        python -m ruff check app/ --select F401 > ../unused-imports.txt 2>&1
        UNUSED_EXIT=$?
        cat ../unused-imports.txt
        if [ $UNUSED_EXIT -ne 0 ]; then
          echo "❌ Found unused imports! Run: python -m ruff check app/ --select F401 --fix"
          echo "status=failed" >> $GITHUB_OUTPUT
        else
          echo "✅ No unused imports found"
          echo "status=passed" >> $GITHUB_OUTPUT
        fi
        exit 0

    - name: Check import errors (missing/wrong imports)
      continue-on-error: true
      id: import-errors
      run: |
        cd backend
        echo "Checking for import errors..."
        # Test if all modules can be imported
        python -c "
        import sys
        import os
        sys.path.insert(0, os.getcwd())

        errors = []

        # Test critical imports
        try:
            from app.main import app
            print('✅ Main app imports successfully')
        except ImportError as e:
            print(f'❌ Main app import failed: {e}')
            errors.append('main')

        try:
            import app.endpoints
            print('✅ Endpoints import successfully')
        except ImportError as e:
            print(f'❌ Endpoints import failed: {e}')
            errors.append('endpoints')

        try:
            import app.services
            print('✅ Services import successfully')
        except ImportError as e:
            print(f'❌ Services import failed: {e}')
            errors.append('services')

        if errors:
            print(f'Failed modules: {errors}')
        " > ../import-errors.txt 2>&1
        IMPORT_EXIT=$?
        cat ../import-errors.txt
        echo "exit_code=$IMPORT_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Full import validation with detailed report
      continue-on-error: true
      id: full-validation
      run: |
        cd backend
        echo "Running comprehensive import validation..."

        # Create comprehensive import checker
        cat > validate_imports.py << 'EOF'
        import ast
        import importlib
        import sys
        import os
        from pathlib import Path

        def check_file_imports(file_path):
            errors = []
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                tree = ast.parse(content)

                for node in ast.walk(tree):
                    if isinstance(node, ast.ImportFrom):
                        module_name = node.module
                        if module_name is None:
                            continue

                        try:
                            module = importlib.import_module(module_name)
                            for alias in node.names:
                                if alias.name == '*':
                                    continue
                                if not hasattr(module, alias.name):
                                    errors.append(f"ERROR: {alias.name} not found in {module_name}")
                        except ImportError as e:
                            # Skip optional dependencies
                            if any(opt in str(e) for opt in ['vosk', 'speech_recognition', 'playwright', 'PyPDF2']):
                                continue
                            errors.append(f"ERROR: Cannot import {module_name}: {e}")
            except Exception as e:
                errors.append(f"ERROR: Failed to parse {file_path}: {e}")
            return errors

        def main():
            sys.path.insert(0, os.getcwd())
            errors = []

            for py_file in Path('app').rglob('*.py'):
                file_errors = check_file_imports(py_file)
                if file_errors:
                    print(f"FILE: {py_file}")
                    for error in file_errors:
                        print(f"  {error}")
                    errors.extend(file_errors)

            if errors:
                print(f"\n❌ Found {len(errors)} import errors")
                return 1
            else:
                print("✅ All imports are valid")
                return 0

        if __name__ == "__main__":
            exit(main())
        EOF

        python validate_imports.py > ../full-validation.txt 2>&1
        VALIDATION_EXIT=$?
        cat ../full-validation.txt
        echo "exit_code=$VALIDATION_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Check import sorting and formatting
      continue-on-error: true
      id: import-sorting
      run: |
        cd backend
        echo "Checking import sorting..."
        python -m ruff check app/ --select I001 > ../import-sorting.txt 2>&1
        SORTING_EXIT=$?
        cat ../import-sorting.txt
        if [ $SORTING_EXIT -ne 0 ]; then
          echo "❌ Imports are not properly sorted! Run: python -m ruff check app/ --select I001 --fix"
          echo "status=failed" >> $GITHUB_OUTPUT
        else
          echo "✅ Imports are properly sorted"
          echo "status=passed" >> $GITHUB_OUTPUT
        fi
        exit 0

    - name: Generate Import Validation Report
      if: always()
      run: |
        cat > import-validation-report.md << 'EOF'
        # Import Validation Report

        ## Summary

        | Check | Status |
        |-------|--------|
        | Unused Imports | ${{ steps.unused-imports.outputs.status || 'unknown' }} |
        | Import Errors | ${{ steps.import-errors.outputs.exit_code == '0' && 'passed' || 'failed' }} |
        | Full Validation | ${{ steps.full-validation.outputs.exit_code == '0' && 'passed' || 'failed' }} |
        | Import Sorting | ${{ steps.import-sorting.outputs.status || 'unknown' }} |

        ## Detailed Results

        ### Unused Imports Check
        EOF

        if [ -f unused-imports.txt ]; then
          echo '```' >> import-validation-report.md
          cat unused-imports.txt >> import-validation-report.md
          echo '```' >> import-validation-report.md
        fi

        cat >> import-validation-report.md << 'EOF'

        ### Import Errors Check
        EOF

        if [ -f import-errors.txt ]; then
          echo '```' >> import-validation-report.md
          cat import-errors.txt >> import-validation-report.md
          echo '```' >> import-validation-report.md
        fi

        cat >> import-validation-report.md << 'EOF'

        ### Full Validation
        EOF

        if [ -f full-validation.txt ]; then
          echo '```' >> import-validation-report.md
          cat full-validation.txt >> import-validation-report.md
          echo '```' >> import-validation-report.md
        fi

        cat >> import-validation-report.md << 'EOF'

        ### Import Sorting
        EOF

        if [ -f import-sorting.txt ]; then
          echo '```' >> import-validation-report.md
          cat import-sorting.txt >> import-validation-report.md
          echo '```' >> import-validation-report.md
        fi

        # Add to GitHub Step Summary
        cat import-validation-report.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Import Validation Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: import-validation-report
        path: |
          import-validation-report.md
          unused-imports.txt
          import-errors.txt
          full-validation.txt
          import-sorting.txt
        retention-days: 30