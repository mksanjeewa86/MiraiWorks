name: Frontend - Quality & Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'

jobs:
  frontend:
    name: Frontend Quality & Build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Dependencies
      working-directory: ./frontend
      env:
        CI: true
        HUSKY: 0
      run: |
        npm ci
        echo "Dependencies installed successfully"

    - name: TypeScript Type Checking
      id: typecheck
      continue-on-error: true
      working-directory: ./frontend
      run: |
        echo "## üìò TypeScript Type Checking" | tee typecheck-report.txt
        npm run typecheck 2>&1 | tee -a typecheck-report.txt
        TYPECHECK_EXIT=${PIPESTATUS[0]}

        if [ $TYPECHECK_EXIT -eq 0 ]; then
          echo "‚úÖ No type errors found"
        else
          echo "‚ùå Type errors found - see details above"
        fi

        exit $TYPECHECK_EXIT

    - name: ESLint
      id: lint
      continue-on-error: true
      working-directory: ./frontend
      run: |
        echo "## üîç ESLint Results" | tee lint-report.txt
        npm run lint 2>&1 | tee -a lint-report.txt
        LINT_EXIT=${PIPESTATUS[0]}

        if [ $LINT_EXIT -eq 0 ]; then
          echo "‚úÖ No linting errors found"
        else
          echo "‚ùå Linting errors found - see details above"
        fi

        exit $LINT_EXIT

    - name: Build Application
      id: build
      continue-on-error: true
      working-directory: ./frontend
      env:
        NODE_ENV: production
      run: |
        echo "## üèóÔ∏è Building Next.js Application" | tee build-report.txt
        npm run build:ci 2>&1 | tee -a build-report.txt
        BUILD_EXIT=${PIPESTATUS[0]}

        if [ $BUILD_EXIT -eq 0 ]; then
          echo "‚úÖ Build completed successfully"
        else
          echo "‚ùå Build failed - see details above"
        fi

        exit $BUILD_EXIT

    - name: Generate Report
      if: always()
      working-directory: ./frontend
      run: |
        echo "## üé® Frontend Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| TypeScript | ${{ steps.typecheck.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ESLint | ${{ steps.lint.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ steps.build.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.typecheck.outcome }}" != "success" ]; then
          echo "### ‚ùå TypeScript Errors (First 20)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -20 typecheck-report.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No report available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.lint.outcome }}" != "success" ]; then
          echo "### ‚ùå ESLint Errors (First 20)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -20 lint-report.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No report available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.build.outcome }}" != "success" ]; then
          echo "### ‚ùå Build Errors (Last 30 lines)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -30 build-report.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No report available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Error Reports
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-error-reports
        path: |
          frontend/typecheck-report.txt
          frontend/lint-report.txt
          frontend/build-report.txt
        retention-days: 30

    - name: Quality Gate
      if: failure()
      run: |
        echo "‚ùå Frontend quality checks failed"
        echo ""
        echo "Failed checks:"
        [ "${{ steps.typecheck.outcome }}" != "success" ] && echo "  - TypeScript type checking"
        [ "${{ steps.lint.outcome }}" != "success" ] && echo "  - ESLint"
        [ "${{ steps.build.outcome }}" != "success" ] && echo "  - Build"
        echo ""
        echo "To fix:"
        echo "  - Types: cd frontend && npm run typecheck"
        echo "  - Linting: cd frontend && npm run lint:fix"
        echo "  - Build: cd frontend && npm run build"
        exit 1
