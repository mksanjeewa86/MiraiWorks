name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Linting
  backend-linting:
    name: Backend Linting & Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      working-directory: ./backend
      continue-on-error: true
      id: install-deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt 2>&1 | tee ../backend-deps.log
        pip install ruff mypy 2>&1 | tee -a ../backend-deps.log
        echo "exit_code=$?" >> $GITHUB_OUTPUT

    - name: Code formatting check (Ruff)
      working-directory: ./backend
      continue-on-error: true
      id: ruff-format
      run: |
        ruff format --check . > ../ruff-format.txt 2>&1
        FORMAT_EXIT=$?
        cat ../ruff-format.txt
        echo "exit_code=$FORMAT_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Linting (Ruff)
      working-directory: ./backend
      continue-on-error: true
      id: ruff-lint
      run: |
        ruff check . > ../ruff-lint.txt 2>&1
        LINT_EXIT=$?
        cat ../ruff-lint.txt
        echo "exit_code=$LINT_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Critical Issues Check (Ruff)
      working-directory: ./backend
      continue-on-error: true
      id: ruff-critical
      run: |
        ruff check . --select=E9,F63,F7,F82,E999,E902 --no-fix --exclude=tests/ > ../ruff-critical.txt 2>&1
        CRITICAL_EXIT=$?
        cat ../ruff-critical.txt
        echo "exit_code=$CRITICAL_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Type checking (MyPy)
      working-directory: ./backend
      continue-on-error: true
      id: mypy-check
      run: |
        mypy app/ --ignore-missing-imports > ../mypy-check.txt 2>&1
        MYPY_EXIT=$?
        cat ../mypy-check.txt
        echo "exit_code=$MYPY_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Basic configuration test
      working-directory: ./backend
      continue-on-error: true
      id: config-test
      env:
        PYTHONPATH: .
      run: |
        export PYTHONPATH=$PWD
        python -c "from app.config import Settings; s = Settings(); print('Backend configuration class works')" > ../config-test.txt 2>&1
        CONFIG_EXIT=$?
        cat ../config-test.txt
        echo "exit_code=$CONFIG_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Generate Backend Report
      if: always()
      run: |
        cat > backend-report.md << 'EOF'
        # Backend Linting & Code Quality Report

        ## Summary

        | Check | Status |
        |-------|--------|
        | Dependency Installation | ${{ steps.install-deps.outputs.exit_code == '0' && '✅ passed' || '❌ failed' }} |
        | Code Formatting (Ruff) | ${{ steps.ruff-format.outputs.exit_code == '0' && '✅ passed' || '❌ failed' }} |
        | Linting (Ruff) | ${{ steps.ruff-lint.outputs.exit_code == '0' && '✅ passed' || '⚠️ warnings' }} |
        | Critical Issues | ${{ steps.ruff-critical.outputs.exit_code == '0' && '✅ passed' || '❌ failed' }} |
        | Type Checking (MyPy) | ${{ steps.mypy-check.outputs.exit_code == '0' && '✅ passed' || '⚠️ warnings' }} |
        | Configuration Test | ${{ steps.config-test.outputs.exit_code == '0' && '✅ passed' || '❌ failed' }} |

        ## Detailed Results

        ### Code Formatting Check
        EOF

        if [ -f ruff-format.txt ]; then
          echo '```' >> backend-report.md
          cat ruff-format.txt >> backend-report.md
          echo '```' >> backend-report.md
        fi

        cat >> backend-report.md << 'EOF'

        ### Linting Results
        EOF

        if [ -f ruff-lint.txt ]; then
          echo '```' >> backend-report.md
          head -100 ruff-lint.txt >> backend-report.md
          echo '```' >> backend-report.md
        fi

        cat >> backend-report.md << 'EOF'

        ### Critical Issues
        EOF

        if [ -f ruff-critical.txt ]; then
          echo '```' >> backend-report.md
          cat ruff-critical.txt >> backend-report.md
          echo '```' >> backend-report.md
        fi

        cat >> backend-report.md << 'EOF'

        ### Type Checking
        EOF

        if [ -f mypy-check.txt ]; then
          echo '```' >> backend-report.md
          head -50 mypy-check.txt >> backend-report.md
          echo '```' >> backend-report.md
        fi

        # Add to GitHub Step Summary
        cat backend-report.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Backend Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-linting-reports
        path: |
          backend-report.md
          ruff-format.txt
          ruff-lint.txt
          ruff-critical.txt
          mypy-check.txt
          config-test.txt
          backend-deps.log
        retention-days: 30


  # Frontend Linting
  frontend-linting:
    name: Frontend Linting & Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      continue-on-error: true
      id: npm-install
      env:
        CI: true
        HUSKY: 0
      run: |
        npm ci > ../frontend-install.log 2>&1
        INSTALL_EXIT=$?
        cat ../frontend-install.log
        echo "exit_code=$INSTALL_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Verify UI components exist
      working-directory: ./frontend
      continue-on-error: true
      id: verify-ui
      run: |
        echo "Checking UI components directory..." > ../ui-components.txt
        ls -la src/components/ui/ >> ../ui-components.txt 2>&1 || echo "UI directory not found!" >> ../ui-components.txt
        echo "Checking if card.tsx exists..." >> ../ui-components.txt
        test -f src/components/ui/card.tsx && echo "✓ card.tsx exists" >> ../ui-components.txt || echo "✗ card.tsx missing!" >> ../ui-components.txt
        test -f src/components/ui/button.tsx && echo "✓ button.tsx exists" >> ../ui-components.txt || echo "✗ button.tsx missing!" >> ../ui-components.txt
        test -f src/components/ui/badge.tsx && echo "✓ badge.tsx exists" >> ../ui-components.txt || echo "✗ badge.tsx missing!" >> ../ui-components.txt
        cat ../ui-components.txt

    - name: Type checking
      working-directory: ./frontend
      continue-on-error: true
      id: typecheck
      run: |
        npm run typecheck > ../frontend-typecheck.txt 2>&1
        TYPECHECK_EXIT=$?
        cat ../frontend-typecheck.txt
        echo "exit_code=$TYPECHECK_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Linting (ESLint)
      working-directory: ./frontend
      continue-on-error: true
      id: eslint
      run: |
        npm run lint > ../frontend-lint.txt 2>&1
        LINT_EXIT=$?
        cat ../frontend-lint.txt
        echo "exit_code=$LINT_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Clean build cache
      working-directory: ./frontend
      run: rm -rf .next || true

    - name: Verify tsconfig paths
      working-directory: ./frontend
      continue-on-error: true
      run: |
        echo "Checking tsconfig.json paths configuration..." > ../tsconfig-paths.txt
        cat tsconfig.json | grep -A 3 '"paths"' >> ../tsconfig-paths.txt 2>&1 || echo "No paths found" >> ../tsconfig-paths.txt
        cat ../tsconfig-paths.txt

    - name: Build application
      working-directory: ./frontend
      continue-on-error: true
      id: build
      env:
        NODE_ENV: production
      run: |
        npm run build:ci > ../frontend-build.log 2>&1
        BUILD_EXIT=$?
        tail -100 ../frontend-build.log
        echo "exit_code=$BUILD_EXIT" >> $GITHUB_OUTPUT
        exit 0

    - name: Generate Frontend Report
      if: always()
      run: |
        cat > frontend-report.md << 'EOF'
        # Frontend Linting & Code Quality Report

        ## Summary

        | Check | Status |
        |-------|--------|
        | NPM Install | ${{ steps.npm-install.outputs.exit_code == '0' && '✅ passed' || '❌ failed' }} |
        | UI Components | ✅ checked |
        | Type Checking | ${{ steps.typecheck.outputs.exit_code == '0' && '✅ passed' || '❌ failed' }} |
        | Linting (ESLint) | ${{ steps.eslint.outputs.exit_code == '0' && '✅ passed' || '⚠️ warnings' }} |
        | Build | ${{ steps.build.outputs.exit_code == '0' && '✅ passed' || '❌ failed' }} |

        ## Detailed Results

        ### Type Checking
        EOF

        if [ -f frontend-typecheck.txt ]; then
          echo '```' >> frontend-report.md
          head -50 frontend-typecheck.txt >> frontend-report.md
          echo '```' >> frontend-report.md
        fi

        cat >> frontend-report.md << 'EOF'

        ### Linting Results
        EOF

        if [ -f frontend-lint.txt ]; then
          echo '```' >> frontend-report.md
          cat frontend-lint.txt >> frontend-report.md
          echo '```' >> frontend-report.md
        fi

        cat >> frontend-report.md << 'EOF'

        ### Build Output (last 50 lines)
        EOF

        if [ -f frontend-build.log ]; then
          echo '```' >> frontend-report.md
          tail -50 frontend-build.log >> frontend-report.md
          echo '```' >> frontend-report.md
        fi

        # Add to GitHub Step Summary
        cat frontend-report.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Frontend Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-linting-reports
        path: |
          frontend-report.md
          frontend-install.log
          frontend-typecheck.txt
          frontend-lint.txt
          frontend-build.log
          ui-components.txt
          tsconfig-paths.txt
        retention-days: 30
