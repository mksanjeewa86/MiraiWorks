name: Documentation Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install documentation tools
      run: |
        pip install markdownlint-cli2 markdown-link-check

    - name: Validate markdown syntax
      run: |
        markdownlint-cli2 "docs/**/*.md" "*.md" || true

    - name: Check markdown links
      run: |
        find docs/ -name "*.md" -exec markdown-link-check {} \;

    - name: Check API documentation sync
      working-directory: ./backend
      run: |
        pip install -r requirements.txt
        python -c "
        import sys
        from app.main import app
        from fastapi.openapi.utils import get_openapi
        import json
        
        # Generate current OpenAPI spec
        openapi_schema = get_openapi(
            title=app.title,
            version=app.version,
            description=app.description,
            routes=app.routes,
        )
        
        # Check if docs/API.md mentions all endpoints
        with open('../docs/API.md', 'r') as f:
            api_docs = f.read()
            
        missing_endpoints = []
        for path, methods in openapi_schema['paths'].items():
            for method in methods.keys():
                endpoint = f'{method.upper()} {path}'
                if endpoint not in api_docs:
                    missing_endpoints.append(endpoint)
                    
        if missing_endpoints:
            print(f'Missing endpoints in API.md: {missing_endpoints}')
            sys.exit(1)
        else:
            print('All API endpoints are documented')
        "

    - name: Check security documentation completeness
      run: |
        # Check if security measures are documented
        required_security_topics=(
          "Authentication"
          "Authorization"
          "RBAC"
          "Company Scoping"
          "Input Validation"
          "File Upload Security"
          "2FA"
          "Audit Logging"
        )
        
        security_doc="docs/SECURITY.md"
        if [ ! -f "$security_doc" ]; then
          echo "SECURITY.md is missing!"
          exit 1
        fi
        
        missing_topics=()
        for topic in "${required_security_topics[@]}"; do
          if ! grep -q "$topic" "$security_doc"; then
            missing_topics+=("$topic")
          fi
        done
        
        if [ ${#missing_topics[@]} -gt 0 ]; then
          echo "Missing security topics: ${missing_topics[@]}"
          exit 1
        else
          echo "All required security topics are documented"
        fi

    - name: Check architecture documentation
      run: |
        # Verify architecture documentation exists and is complete
        arch_doc="docs/ARCHITECTURE.md"
        if [ ! -f "$arch_doc" ]; then
          echo "ARCHITECTURE.md is missing!"
          exit 1
        fi
        
        required_sections=(
          "System Overview"
          "Database Schema"
          "API Endpoints"
          "Real-time Features"
          "External Integrations"
          "Security Model"
        )
        
        missing_sections=()
        for section in "${required_sections[@]}"; do
          if ! grep -q "$section" "$arch_doc"; then
            missing_sections+=("$section")
          fi
        done
        
        if [ ${#missing_sections[@]} -gt 0 ]; then
          echo "Missing architecture sections: ${missing_sections[@]}"
          exit 1
        else
          echo "All required architecture sections are documented"
        fi

    - name: Generate documentation report
      run: |
        echo "# Documentation Quality Report" > docs-report.md
        echo "" >> docs-report.md
        echo "Generated on: $(date)" >> docs-report.md
        echo "" >> docs-report.md
        
        # Count documentation files
        doc_count=$(find docs/ -name "*.md" | wc -l)
        echo "- Total documentation files: $doc_count" >> docs-report.md
        
        # Check for empty or short docs
        echo "- Documentation coverage:" >> docs-report.md
        for file in docs/*.md; do
          lines=$(wc -l < "$file")
          if [ $lines -lt 10 ]; then
            echo "  - ⚠️ $file: Only $lines lines (may need more content)" >> docs-report.md
          else
            echo "  - ✅ $file: $lines lines" >> docs-report.md
          fi
        done

    - name: Upload documentation report
      uses: actions/upload-artifact@v3
      with:
        name: docs-quality-report
        path: docs-report.md