version: '3.8'

services:
  # Main application with video call support
  miraiworks-video:
    build:
      context: ..
      dockerfile: docker/video-call.dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/miraiworks
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
      - COTURN_HOST=coturn
      - COTURN_PORT=3478
      - COTURN_SECRET=${COTURN_SECRET:-your-coturn-secret}
      - STT_API_KEY=${STT_API_KEY}
      - STT_SERVICE_URL=${STT_SERVICE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      - postgres
      - redis
      - coturn
    networks:
      - miraiworks-network
    restart: unless-stopped
    volumes:
      - video_recordings:/app/recordings
      - transcription_cache:/app/transcriptions
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=miraiworks
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - miraiworks-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis for session management and real-time features
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - miraiworks-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # COTURN server for WebRTC STUN/TURN
  coturn:
    image: coturn/coturn:latest
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "65435-65535:65435-65535/udp"  # Media relay ports
    environment:
      - TURN_USERNAME=miraiworks
      - TURN_PASSWORD=${COTURN_SECRET:-your-coturn-secret}
      - TURN_REALM=miraiworks.com
      - TURN_EXTERNAL_IP=${EXTERNAL_IP:-127.0.0.1}
    command: |
      -n
      --log-file=stdout
      --lt-cred-mech
      --fingerprint
      --realm=miraiworks.com
      --user=miraiworks:${COTURN_SECRET:-your-coturn-secret}
      --total-quota=100
      --bps-capacity=0
      --stale-nonce
      --no-cli
      --external-ip=${EXTERNAL_IP:-127.0.0.1}
    networks:
      - miraiworks-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - miraiworks-video
    networks:
      - miraiworks-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - miraiworks-network
    restart: unless-stopped

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - miraiworks-network
    restart: unless-stopped

networks:
  miraiworks-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  video_recordings:
  transcription_cache:
  prometheus_data:
  grafana_data: