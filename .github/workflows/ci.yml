name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: hrms_test
          MYSQL_USER: hrms
          MYSQL_PASSWORD: hrms123
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: --health-cmd="curl -f http://localhost:9000/minio/health/live" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy

    - name: Code formatting check (Black)
      working-directory: ./backend
      run: black --check --diff .

    - name: Linting (Flake8)
      working-directory: ./backend
      run: flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Type checking (MyPy)
      working-directory: ./backend
      run: mypy app/ --ignore-missing-imports

    - name: Run tests with coverage
      working-directory: ./backend
      env:
        DB_URL: mysql+asyncmy://hrms:hrms123@localhost:3306/hrms_test
        REDIS_URL: redis://localhost:6379/0
        S3_ENDPOINT: http://localhost:9000
        S3_ACCESS_KEY: minioadmin
        S3_SECRET_KEY: minioadmin
        S3_BUCKET: miraiworks-test
        JWT_SECRET: test-secret-key-for-ci
        ENVIRONMENT: test
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Type checking
      working-directory: ./frontend
      run: npm run typecheck

    - name: Linting (ESLint)
      working-directory: ./frontend
      run: npm run lint

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Run unit tests
      working-directory: ./frontend
      run: |
        npm run test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Backend dependency check
      working-directory: ./backend
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: Frontend dependency audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          frontend/npm-audit.json

  # Build and Test Docker Images
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: miraiworks-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: miraiworks-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4

    - name: Start services
      run: |
        cd platform
        docker-compose up -d
        sleep 30 # Wait for services to be ready

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migrations
      working-directory: ./backend
      env:
        DB_URL: mysql+asyncmy://hrms:hrms123@localhost:3306/hrms
        ENVIRONMENT: test
      run: |
        alembic upgrade head

    - name: Run integration tests
      working-directory: ./backend
      env:
        DB_URL: mysql+asyncmy://hrms:hrms123@localhost:3306/hrms
        REDIS_URL: redis://localhost:6379/0
        S3_ENDPOINT: http://localhost:9000
        S3_ACCESS_KEY: minioadmin
        S3_SECRET_KEY: minioadmin
        S3_BUCKET: miraiworks
        JWT_SECRET: test-secret-key
        ENVIRONMENT: test
      run: |
        pytest tests/integration/ -v

    - name: Stop services
      if: always()
      run: |
        cd platform
        docker-compose down -v