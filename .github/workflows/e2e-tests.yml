name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 90
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7, 8]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: miraiworks
          MYSQL_USER: hrms
          MYSQL_PASSWORD: hrms
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: frontend-nextjs/package-lock.json

    # Backend Setup (Python FastAPI)
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup database and create sample data
      run: |
        cd backend
        # Wait for MySQL to be ready with timeout
        timeout=30
        while ! mysqladmin ping -h localhost -P 3306 -u hrms -phrms --silent; do
          if [ $timeout -eq 0 ]; then
            echo "MySQL failed to start"
            exit 1
          fi
          timeout=$((timeout-1))
          sleep 1
        done
        echo "MySQL is ready!"
        
        # Create minimal test data with retry
        for i in {1..3}; do
          if python create_minimal_test_data.py; then
            echo "Minimal test data created successfully"
            break
          else
            echo "Minimal test data creation failed (attempt $i/3)"
            if [ $i -eq 3 ]; then exit 1; fi
            sleep 2
          fi
        done
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: hrms
        DB_PASSWORD: hrms
        DB_NAME: miraiworks

    - name: Start backend server
      run: |
        cd backend
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        
        # Wait for backend to be ready with timeout
        timeout=60
        while ! curl -f http://localhost:8000/health >/dev/null 2>&1; do
          if [ $timeout -eq 0 ]; then
            echo "Backend failed to start"
            curl http://localhost:8000/health || true
            exit 1
          fi
          timeout=$((timeout-1))
          sleep 1
        done
        echo "Backend is ready!"
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: hrms
        DB_PASSWORD: hrms
        DB_NAME: miraiworks
        JWT_SECRET: test-secret-key-for-ci-very-long-and-secure

    # Frontend Setup
    - name: Install frontend dependencies
      run: |
        cd frontend-nextjs
        npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('frontend-nextjs/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright Browsers
      run: |
        cd frontend-nextjs
        npx playwright install --with-deps chromium

    - name: Build frontend
      run: |
        cd frontend-nextjs
        npm run build

    # Run Tests (Playwright will start its own server via webServer config)
    - name: Run Playwright tests (Shard ${{ matrix.shard }}/8)
      run: |
        cd frontend-nextjs
        npx playwright test --shard=${{ matrix.shard }}/8 --max-failures=5
      env:
        CI: true
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: http://localhost:8000/api
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-${{ matrix.shard }}
        path: frontend-nextjs/tests/results/
        retention-days: 7

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.shard }}
        path: frontend-nextjs/tests/reports/
        retention-days: 7