name: Backend - Ruff Quality

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**/*.py'
      - 'backend/ruff.toml'
      - '.github/workflows/backend-ruff.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**/*.py'
      - 'backend/ruff.toml'
      - '.github/workflows/backend-ruff.yml'

jobs:
  ruff:
    name: Ruff Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ruff
      run: pip install ruff

    - name: Code Formatting Check
      id: format
      continue-on-error: true
      working-directory: ./backend
      run: |
        echo "## üìù Files Needing Formatting:" | tee format-report.txt
        ruff format --check . | tee -a format-report.txt
        FORMAT_EXIT=$?

        echo ""
        echo "## üîç Formatting Diff Preview (first 50 lines):" | tee -a format-report.txt
        ruff format --check --diff . 2>&1 | head -50 | tee -a format-report.txt || true

        if [ $FORMAT_EXIT -eq 0 ]; then
          echo "‚úÖ All files are properly formatted"
        else
          echo "‚ùå Some files need formatting - see details above"
        fi

        exit $FORMAT_EXIT

    - name: Linting - All Rules
      id: lint
      continue-on-error: true
      working-directory: ./backend
      run: |
        echo "## üîç Linting Errors (with file:line details):"
        ruff check . --output-format=text | tee lint-report.txt
        LINT_EXIT=$?

        echo ""
        echo "## üìä Error Summary by File:"
        ruff check . --output-format=grouped | head -100 || true

        # For GitHub annotations
        echo ""
        echo "## GitHub Annotations:"
        ruff check . --output-format=github || true

        exit $LINT_EXIT

    - name: Generate Detailed Report
      if: always()
      working-directory: ./backend
      run: |
        echo "## üîç Ruff Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Format | ${{ steps.format.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ steps.lint.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.format.outcome }}" != "success" ]; then
          echo "### ‚ùå Formatting Issues" >> $GITHUB_STEP_SUMMARY
          echo "Files needing formatting:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ruff format --check . 2>&1 | head -30 >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.lint.outcome }}" != "success" ]; then
          echo "### ‚ùå Linting Issues (Top 30)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ruff check . --output-format=text 2>&1 | head -30 >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "### üìä Statistics" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        ruff check . --statistics 2>&1 || true >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload Error Reports
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ruff-error-reports
        path: |
          backend/format-report.txt
          backend/lint-report.txt
        retention-days: 30

    - name: Quality Gate
      if: always()
      run: |
        echo "=== Quality Gate Check ==="
        FAILED=0

        if [ "${{ steps.format.outcome }}" != "success" ]; then
          echo "‚ùå Code formatting failed"
          FAILED=1
        fi

        if [ "${{ steps.lint.outcome }}" != "success" ]; then
          echo "‚ùå Linting failed"
          FAILED=1
        fi

        if [ $FAILED -eq 1 ]; then
          echo ""
          echo "‚ùå Ruff quality checks failed"
          echo "To fix formatting: cd backend && ruff format ."
          echo "To fix linting: cd backend && ruff check . --fix"
          exit 1
        else
          echo "‚úÖ All Ruff checks passed"
        fi
